# import UserOrderByInput, PostOrderByInput, CommentOrderByInput  from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after:String, orderBy: UserOrderByInput): [User!]!
    posts(query: String, first: Int, skip: Int, after:String, orderBy: PostOrderByInput): [Post!]!
    comments(query:String, first: Int, skip: Int, after:String, orderBy: CommentOrderByInput): [Comment!]!
    myposts(query: String, first: Int, skip: Int, after:String, orderBy: PostOrderByInput): [Post!]!
    me: User!
    post(id: ID!): Post!
} 

type Mutation {
    createUser(data: CreateUserInput!): AuthPayLoad!
    updateUser(data: UpdateUserInput!): User!
    deleteUser: User!
    login(data: LoginInput!): AuthPayLoad!
    createPost(data: CreatePostInput!):Post!
    updatePost(id:ID!, data: UpdatePostInput!): Post!
    deletePost(id: ID!): Post!
    createComment(data: CreateCommentInput!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    deleteComment(id: ID!) : Comment!
}

type Subscription {
    count: Int!
    comment(postId:ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}

type AuthPayLoad {
    token: String!
    user: User!
}

input LoginInput {
    email: String!
    password: String!
}

input CreateUserInput {
    name: String! 
    email: String! 
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreatePostInput {
    title: String! 
    body:String!  
    published: Boolean!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    post: ID! 
    text:String! 
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
    updatedAt: String!
    createdAt: String!
}
 
enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}
